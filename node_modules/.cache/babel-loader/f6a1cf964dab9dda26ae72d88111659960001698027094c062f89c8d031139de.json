{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = '';\nconst getHeaders = () => {\n  let header = {\n    // 'Content-Type': 'application/json; ',\n    // // // 'Content-Type': 'application/x-www-form-urlencoded',\n    // 'Accept': 'application/json, text/plain, /',\n    // \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\n    // \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Origin, X-Requested-With, Content-Type, Accept\",\n    // 'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\n  };\n  return header;\n};\nexport const apiPost = async (url, params = {}) => {\n  const headers = getHeaders();\n  console.log('POST Url: ', `${baseUrl}${url}`, 'Тело запроса: ', params, 'headers: ', headers);\n  let data = await fetch(`${baseUrl}${url}`, {\n    method: 'POST',\n    credentials: 'omit',\n    headers: headers,\n    body: params\n  });\n  let dataJson = await data.json();\n  return dataJson || false;\n};\nexport const apiGet = async (url, params = {}) => {\n  const headers = await getHeaders();\n  console.log('GET Url: ', `${baseUrl}${url}`, 'Тело запроса: ', params, 'headers: ', headers);\n  const response = await fetch(`${baseUrl}${url}`, {\n    method: \"GET\",\n    headers: headers,\n    mode: \"cors\",\n    cache: \"default\"\n  }).then(res => console.log(res));\n  return await response.json(); // parses JSON response into native JavaScript objects\n};\n\n// , {\n//   method: \"GET\", // *GET, POST, PUT, DELETE, etc. .then(res => res.json)\n//   mode: \"cors\", // no-cors, *cors, same-origin\n//   cache: \"default\", // *default, no-cache, reload, force-cache, only-if-cached\n//   headers: headers\n// }","map":{"version":3,"names":["axios","baseUrl","getHeaders","header","apiPost","url","params","headers","console","log","data","fetch","method","credentials","body","dataJson","json","apiGet","response","mode","cache","then","res"],"sources":["D:/TPU/Тинькофф/parking/src/service/server.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = '';\r\n\r\nconst getHeaders = () => {\r\n  let header = {\r\n    // 'Content-Type': 'application/json; ',\r\n    // // // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    // 'Accept': 'application/json, text/plain, /',\r\n    // \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n    // \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Origin, X-Requested-With, Content-Type, Accept\",\r\n    // 'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\r\n  };\r\n\r\n  return header;\r\n};\r\n\r\nexport const apiPost = async (url, params = {}) => {\r\n  const headers = getHeaders();\r\n  console.log(\r\n    'POST Url: ',\r\n    `${baseUrl}${url}`,\r\n    'Тело запроса: ',\r\n    params,\r\n    'headers: ',\r\n    headers,\r\n  );\r\n\r\n  let data = await fetch(`${baseUrl}${url}`, {\r\n    method: 'POST',\r\n    credentials: 'omit',\r\n    headers: headers,\r\n    body: params,\r\n  })\r\n\r\n  let dataJson = await data.json();\r\n\r\n  return (dataJson|| false);\r\n};\r\n\r\nexport const apiGet = async (url, params = {}) => {\r\n  const headers = await getHeaders();\r\n  console.log(\r\n    'GET Url: ',\r\n    `${baseUrl}${url}`,\r\n    'Тело запроса: ',\r\n    params,\r\n    'headers: ',\r\n    headers,\r\n  );\r\n\r\n  const response = await fetch(`${baseUrl}${url}`, {\r\n    method: \"GET\",\r\n    headers: headers,\r\n    mode: \"cors\",\r\n    cache: \"default\",\r\n  }).then(res => console.log(res));\r\n  return await response.json(); // parses JSON response into native JavaScript objects\r\n};\r\n\r\n  \r\n\r\n// , {\r\n//   method: \"GET\", // *GET, POST, PUT, DELETE, etc. .then(res => res.json)\r\n//   mode: \"cors\", // no-cors, *cors, same-origin\r\n//   cache: \"default\", // *default, no-cache, reload, force-cache, only-if-cached\r\n//   headers: headers\r\n// }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,EAAE;AAElB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,IAAIC,MAAM,GAAG;IACX;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED,OAAOA,MAAM;AACf,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EACjD,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAC5BM,OAAO,CAACC,GAAG,CACT,YAAY,EACX,GAAER,OAAQ,GAAEI,GAAI,EAAC,EAClB,gBAAgB,EAChBC,MAAM,EACN,WAAW,EACXC,OACF,CAAC;EAED,IAAIG,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEV,OAAQ,GAAEI,GAAI,EAAC,EAAE;IACzCO,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,MAAM;IACnBN,OAAO,EAAEA,OAAO;IAChBO,IAAI,EAAER;EACR,CAAC,CAAC;EAEF,IAAIS,QAAQ,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;EAEhC,OAAQD,QAAQ,IAAG,KAAK;AAC1B,CAAC;AAED,OAAO,MAAME,MAAM,GAAG,MAAAA,CAAOZ,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EAChD,MAAMC,OAAO,GAAG,MAAML,UAAU,CAAC,CAAC;EAClCM,OAAO,CAACC,GAAG,CACT,WAAW,EACV,GAAER,OAAQ,GAAEI,GAAI,EAAC,EAClB,gBAAgB,EAChBC,MAAM,EACN,WAAW,EACXC,OACF,CAAC;EAED,MAAMW,QAAQ,GAAG,MAAMP,KAAK,CAAE,GAAEV,OAAQ,GAAEI,GAAI,EAAC,EAAE;IAC/CO,MAAM,EAAE,KAAK;IACbL,OAAO,EAAEA,OAAO;IAChBY,IAAI,EAAE,MAAM;IACZC,KAAK,EAAE;EACT,CAAC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAId,OAAO,CAACC,GAAG,CAACa,GAAG,CAAC,CAAC;EAChC,OAAO,MAAMJ,QAAQ,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}