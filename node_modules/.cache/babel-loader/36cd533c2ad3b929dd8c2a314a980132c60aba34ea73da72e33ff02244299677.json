{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = 'https://d5e5-5-136-123-38.ngrok-free.app/';\nconst getHeaders = () => {\n  let header = {\n    'Content-Type': 'application/json; ',\n    // 'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json, text/plain, /',\n    \"Access-Control-Allow-Origin\": \"*\"\n    // \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n  };\n  return header;\n};\nexport const apiPost = async (url, params = {}) => {\n  const headers = getHeaders();\n  console.log('POST Url: ', `${baseUrl}${url}`, 'Тело запроса: ', params, 'headers: ', headers);\n  await fetch(`${baseUrl}${url}`, {\n    method: 'POST',\n    credentials: 'omit',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json, text/plain, */*'\n    },\n    body: params\n  });\n  return data || false;\n};\nexport const apiGet = async (url, params = {}) => {\n  const headers = await getHeaders();\n  console.log('GET Url: ', `${baseUrl}${url}`, 'Тело запроса: ', params, 'headers: ', headers);\n  const data = await axios.get(`${baseUrl}${url}`, {\n    params,\n    headers,\n    timeout: 60000\n  }).then(result => {\n    return result.data;\n  }).catch(err => {\n    throw err;\n  });\n  return data || false;\n};\nexport const apiFetch = async (url, params = {}) => {\n  const headers = await getHeaders();\n  // console.log(\n  //   'GET Url: ',\n  //   `${baseUrl}${url}`,\n  //   'Тело запроса: ',\n  //   params,\n  //   'headers: ',\n  //   headers,\n  // );\n\n  const response = await fetch(`${baseUrl}${url}`, {\n    method: \"GET\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"default\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    headers: headers\n  });\n  console.log(response);\n  return await response.json(); // parses JSON response into native JavaScript objects\n};","map":{"version":3,"names":["axios","baseUrl","getHeaders","header","apiPost","url","params","headers","console","log","fetch","method","credentials","Accept","body","data","apiGet","get","timeout","then","result","catch","err","apiFetch","response","mode","cache","json"],"sources":["D:/TPU/Тинькофф/parking/src/service/server.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst baseUrl = 'https://d5e5-5-136-123-38.ngrok-free.app/';\r\n\r\nconst getHeaders = () => {\r\n  let header = {\r\n    'Content-Type': 'application/json; ',\r\n    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    'Accept': 'application/json, text/plain, /',\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n    // \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\r\n  };\r\n\r\n  return header;\r\n};\r\n\r\nexport const apiPost = async (url, params = {}) => {\r\n  const headers = getHeaders();\r\n  console.log(\r\n    'POST Url: ',\r\n    `${baseUrl}${url}`,\r\n    'Тело запроса: ',\r\n    params,\r\n    'headers: ',\r\n    headers,\r\n  );\r\n\r\n  await fetch(`${baseUrl}${url}`, {\r\n    method: 'POST',\r\n    credentials: 'omit',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json, text/plain, */*',\r\n    },\r\n    body: params,\r\n  })\r\n  return (data || false);\r\n};\r\n\r\nexport const apiGet = async (url, params = {}) => {\r\n  const headers = await getHeaders();\r\n  console.log(\r\n    'GET Url: ',\r\n    `${baseUrl}${url}`,\r\n    'Тело запроса: ',\r\n    params,\r\n    'headers: ',\r\n    headers,\r\n  );\r\n\r\n  const data = await axios\r\n    .get(`${baseUrl}${url}`, {\r\n      params,\r\n      headers,\r\n      timeout: 60000,\r\n    })\r\n    .then(result => {\r\n      return result.data;\r\n    })\r\n    .catch(err => {\r\n      throw err;\r\n    });\r\n\r\n  return(data || false);\r\n};\r\n\r\nexport const apiFetch = async (url, params = {}) => {\r\n  const headers = await getHeaders();\r\n  // console.log(\r\n  //   'GET Url: ',\r\n  //   `${baseUrl}${url}`,\r\n  //   'Тело запроса: ',\r\n  //   params,\r\n  //   'headers: ',\r\n  //   headers,\r\n  // );\r\n\r\n  const response = await fetch(`${baseUrl}${url}`, {\r\n    method: \"GET\", // *GET, POST, PUT, DELETE, etc.\r\n    mode: \"cors\", // no-cors, *cors, same-origin\r\n    cache: \"default\", // *default, no-cache, reload, force-cache, only-if-cached\r\n    headers: headers\r\n  });\r\n  console.log(response);\r\n  return await response.json(); // parses JSON response into native JavaScript objects\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2CAA2C;AAE3D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,IAAIC,MAAM,GAAG;IACX,cAAc,EAAE,oBAAoB;IACpC;IACA,QAAQ,EAAE,iCAAiC;IAC3C,6BAA6B,EAAE;IAC/B;EACF,CAAC;EAED,OAAOA,MAAM;AACf,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EACjD,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAC5BM,OAAO,CAACC,GAAG,CACT,YAAY,EACX,GAAER,OAAQ,GAAEI,GAAI,EAAC,EAClB,gBAAgB,EAChBC,MAAM,EACN,WAAW,EACXC,OACF,CAAC;EAED,MAAMG,KAAK,CAAE,GAAET,OAAQ,GAAEI,GAAI,EAAC,EAAE;IAC9BM,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,MAAM;IACnBL,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCM,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAER;EACR,CAAC,CAAC;EACF,OAAQS,IAAI,IAAI,KAAK;AACvB,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOX,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EAChD,MAAMC,OAAO,GAAG,MAAML,UAAU,CAAC,CAAC;EAClCM,OAAO,CAACC,GAAG,CACT,WAAW,EACV,GAAER,OAAQ,GAAEI,GAAI,EAAC,EAClB,gBAAgB,EAChBC,MAAM,EACN,WAAW,EACXC,OACF,CAAC;EAED,MAAMQ,IAAI,GAAG,MAAMf,KAAK,CACrBiB,GAAG,CAAE,GAAEhB,OAAQ,GAAEI,GAAI,EAAC,EAAE;IACvBC,MAAM;IACNC,OAAO;IACPW,OAAO,EAAE;EACX,CAAC,CAAC,CACDC,IAAI,CAACC,MAAM,IAAI;IACd,OAAOA,MAAM,CAACL,IAAI;EACpB,CAAC,CAAC,CACDM,KAAK,CAACC,GAAG,IAAI;IACZ,MAAMA,GAAG;EACX,CAAC,CAAC;EAEJ,OAAOP,IAAI,IAAI,KAAK;AACtB,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAAA,CAAOlB,GAAG,EAAEC,MAAM,GAAG,CAAC,CAAC,KAAK;EAClD,MAAMC,OAAO,GAAG,MAAML,UAAU,CAAC,CAAC;EAClC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMsB,QAAQ,GAAG,MAAMd,KAAK,CAAE,GAAET,OAAQ,GAAEI,GAAI,EAAC,EAAE;IAC/CM,MAAM,EAAE,KAAK;IAAE;IACfc,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,SAAS;IAAE;IAClBnB,OAAO,EAAEA;EACX,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACe,QAAQ,CAAC;EACrB,OAAO,MAAMA,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}