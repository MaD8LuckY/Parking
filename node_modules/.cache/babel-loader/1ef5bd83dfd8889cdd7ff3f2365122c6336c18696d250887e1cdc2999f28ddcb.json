{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport ListUsers from \"./ListUsers\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreaterList = props => {\n  _s();\n  const [places, setPlace] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const responceUsers = await fetch('/api/users');\n      const responceSpaces = await fetch('/api/spaces');\n      const dataUsers = await responceUsers.json();\n      const dataSpaces = await responceSpaces.json();\n\n      // console.log(dataUsers, dataSpaces)\n      const placesList = createDataList(dataUsers, dataSpaces);\n    };\n    fetchData();\n  }, [places]);\n  const createDataList = (listUsers, listSpaces) => {\n    const array = [];\n    for (let item of listSpaces) {\n      if (item.status === 1) {\n        array.push();\n      }\n    }\n  };\n\n  // state = {\n  //   dataList: {}\n  // }\n\n  // const async load() {\n  //   const listik = [];\n  //   const itemSpace = await this.fetchSpace();\n  //   const itemUser = await this.fetchUser();\n  //   for (let item of itemSpace) {\n  //     if (item.status === 1) {\n  //       listik.push(this.statusOne(item.id, itemUser))\n  //     } else if (item.status === 0) {\n  //       listik.push(this.statusZero(item.id))\n  //     } else { console.log(\"Ошибка\") }\n  //   }\n\n  //   this.setState({\n  //     dataList: listik\n  //   })\n  // }\n\n  // getTitle = (record) => record.title\n  // getID = (record) => record.id\n  // getColor = (record) => record.color\n\n  // statusOne = (id, users) => {\n  //   for (let user of users) {\n  //     if (id === Number(user.parkingLot)) {\n  //       return {'id': id ,\n  //       'title': `${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`,\n  //       'color': 'red'}\n  //     }\n  //   }\n  // }\n  // statusZero = (id) => {\n  //   return {'id': id, \n  //   'title': `${id} - Свободно`,\n  //   'color': 'green'}\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <ListUsers />\n  ;\n};\n_s(CreaterList, \"zES6TN/awhMOTknvc9pwHcW3IA0=\");\n_c = CreaterList;\nexport default CreaterList;\nvar _c;\n$RefreshReg$(_c, \"CreaterList\");","map":{"version":3,"names":["useEffect","useState","ListUsers","Fragment","_Fragment","jsxDEV","_jsxDEV","CreaterList","props","_s","places","setPlace","fetchData","responceUsers","fetch","responceSpaces","dataUsers","json","dataSpaces","placesList","createDataList","listUsers","listSpaces","array","item","status","push","_c","$RefreshReg$"],"sources":["D:/TPU/Тинькофф/parking/src/modules/containers/CreaterList.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport ListUsers from \"./ListUsers\";\r\n\r\nconst CreaterList = (props) => {\r\n\r\n  const [places, setPlace] = useState([])\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const responceUsers = await fetch('/api/users')\r\n      const responceSpaces = await fetch('/api/spaces')\r\n\r\n      const dataUsers = await responceUsers.json()\r\n      const dataSpaces = await responceSpaces.json()\r\n\r\n\r\n      // console.log(dataUsers, dataSpaces)\r\n      const placesList = createDataList(dataUsers, dataSpaces)\r\n\r\n      \r\n    }\r\n    fetchData()\r\n  }, [places])\r\n\r\n  const createDataList = (listUsers, listSpaces) => {\r\n    const array = []\r\n    for(let item of listSpaces){\r\n      if(item.status === 1){\r\n        array.push()\r\n      }\r\n    }\r\n  }\r\n\r\n  // state = {\r\n  //   dataList: {}\r\n  // }\r\n\r\n\r\n  // const async load() {\r\n  //   const listik = [];\r\n  //   const itemSpace = await this.fetchSpace();\r\n  //   const itemUser = await this.fetchUser();\r\n  //   for (let item of itemSpace) {\r\n  //     if (item.status === 1) {\r\n  //       listik.push(this.statusOne(item.id, itemUser))\r\n  //     } else if (item.status === 0) {\r\n  //       listik.push(this.statusZero(item.id))\r\n  //     } else { console.log(\"Ошибка\") }\r\n  //   }\r\n\r\n  //   this.setState({\r\n  //     dataList: listik\r\n  //   })\r\n  // }\r\n\r\n  // getTitle = (record) => record.title\r\n  // getID = (record) => record.id\r\n  // getColor = (record) => record.color\r\n\r\n  // statusOne = (id, users) => {\r\n  //   for (let user of users) {\r\n  //     if (id === Number(user.parkingLot)) {\r\n  //       return {'id': id ,\r\n  //       'title': `${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`,\r\n  //       'color': 'red'}\r\n  //     }\r\n  //   }\r\n  // }\r\n  // statusZero = (id) => {\r\n  //   return {'id': id, \r\n  //   'title': `${id} - Свободно`,\r\n  //   'color': 'green'}\r\n  // }\r\n\r\n\r\n    return (\r\n      <>\r\n        {/* <ListUsers /> */}\r\n      </>\r\n      // <ListUsers />\r\n    )\r\n\r\n}\r\n\r\nexport default CreaterList;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE7B,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEvCD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC/C,MAAMC,cAAc,GAAG,MAAMD,KAAK,CAAC,aAAa,CAAC;MAEjD,MAAME,SAAS,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,CAAC;MAC5C,MAAMC,UAAU,GAAG,MAAMH,cAAc,CAACE,IAAI,CAAC,CAAC;;MAG9C;MACA,MAAME,UAAU,GAAGC,cAAc,CAACJ,SAAS,EAAEE,UAAU,CAAC;IAG1D,CAAC;IACDN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;EAEZ,MAAMU,cAAc,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IAChD,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAI,IAAIC,IAAI,IAAIF,UAAU,EAAC;MACzB,IAAGE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAC;QACnBF,KAAK,CAACG,IAAI,CAAC,CAAC;MACd;IACF;EACF,CAAC;;EAED;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGE,oBACEpB,OAAA,CAAAF,SAAA,mBAEE;EACF;EAAA;AAGN,CAAC;AAAAK,EAAA,CA/EKF,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAiFjB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}