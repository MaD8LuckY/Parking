{"ast":null,"code":"import React from \"react\";\nimport ListUsers from \"./ListUsers\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreaterList = props => {\n  // constructor(props){\n  //   super(props)\n  //   this.load()\n  // }\n\n  // state = {\n  //   dataList: {}\n  // }\n\n  // const async load() {\n  //   const listik = [];\n  //   const itemSpace = await this.fetchSpace();\n  //   const itemUser = await this.fetchUser();\n  //   for (let item of itemSpace) {\n  //     if (item.status === 1) {\n  //       listik.push(this.statusOne(item.id, itemUser))\n  //     } else if (item.status === 0) {\n  //       listik.push(this.statusZero(item.id))\n  //     } else { console.log(\"Ошибка\") }\n  //   }\n\n  //   this.setState({\n  //     dataList: listik\n  //   })\n  // }\n\n  // getTitle = (record) => record.title\n  // getID = (record) => record.id\n  // getColor = (record) => record.color\n\n  // async fetchUser() {\n  //   const response = await fetch('/api/users');\n  //   const { users } = await response.json();\n  //   return users;\n  // }\n\n  // async fetchSpace() {\n  //   const response = await fetch('/api/spaces');\n  //   const { data } = await response.json();\n  //   return data;\n  // }\n\n  // statusOne = (id, users) => {\n  //   for (let user of users) {\n  //     if (id === Number(user.parkingLot)) {\n  //       return {'id': id ,\n  //       'title': `${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`,\n  //       'color': 'red'}\n  //     }\n  //   }\n  // }\n  // statusZero = (id) => {\n  //   return {'id': id, \n  //   'title': `${id} - Свободно`,\n  //   'color': 'green'}\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  // <ListUsers />\n  ;\n};\n_c = CreaterList;\nexport default CreaterList;\nvar _c;\n$RefreshReg$(_c, \"CreaterList\");","map":{"version":3,"names":["React","ListUsers","Fragment","_Fragment","jsxDEV","_jsxDEV","CreaterList","props","_c","$RefreshReg$"],"sources":["D:/TPU/Тинькофф/parking/src/modules/containers/CreaterList.jsx"],"sourcesContent":["import React from \"react\";\r\nimport ListUsers from \"./ListUsers\";\r\n\r\nconst CreaterList = (props) => {\r\n  // constructor(props){\r\n  //   super(props)\r\n  //   this.load()\r\n  // }\r\n\r\n  // state = {\r\n  //   dataList: {}\r\n  // }\r\n\r\n\r\n  // const async load() {\r\n  //   const listik = [];\r\n  //   const itemSpace = await this.fetchSpace();\r\n  //   const itemUser = await this.fetchUser();\r\n  //   for (let item of itemSpace) {\r\n  //     if (item.status === 1) {\r\n  //       listik.push(this.statusOne(item.id, itemUser))\r\n  //     } else if (item.status === 0) {\r\n  //       listik.push(this.statusZero(item.id))\r\n  //     } else { console.log(\"Ошибка\") }\r\n  //   }\r\n\r\n  //   this.setState({\r\n  //     dataList: listik\r\n  //   })\r\n  // }\r\n\r\n  // getTitle = (record) => record.title\r\n  // getID = (record) => record.id\r\n  // getColor = (record) => record.color\r\n\r\n  // async fetchUser() {\r\n  //   const response = await fetch('/api/users');\r\n  //   const { users } = await response.json();\r\n  //   return users;\r\n  // }\r\n\r\n  // async fetchSpace() {\r\n  //   const response = await fetch('/api/spaces');\r\n  //   const { data } = await response.json();\r\n  //   return data;\r\n  // }\r\n\r\n  // statusOne = (id, users) => {\r\n  //   for (let user of users) {\r\n  //     if (id === Number(user.parkingLot)) {\r\n  //       return {'id': id ,\r\n  //       'title': `${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`,\r\n  //       'color': 'red'}\r\n  //     }\r\n  //   }\r\n  // }\r\n  // statusZero = (id) => {\r\n  //   return {'id': id, \r\n  //   'title': `${id} - Свободно`,\r\n  //   'color': 'green'}\r\n  // }\r\n\r\n\r\n    return (\r\n      <>\r\n      </>\r\n      // <ListUsers />\r\n    )\r\n\r\n}\r\n\r\nexport default CreaterList;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGE,oBACEF,OAAA,CAAAF,SAAA,mBACE;EACF;EAAA;AAGN,CAAC;AAAAK,EAAA,GAlEKF,WAAW;AAoEjB,eAAeA,WAAW;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}