{"ast":null,"code":"var _jsxFileName = \"D:\\\\TPU\\\\\\u0422\\u0438\\u043D\\u044C\\u043A\\u043E\\u0444\\u0444\\\\parking\\\\src\\\\modules\\\\containers\\\\ListUsers.jsx\";\n// class List extends React.Component { \n\n//   async load() {\n//     const listFull = [];\n//     const itemSpace = await this.fetchSpace();\n//     const itemUser = await this.fetchUser();\n//     for(let item of itemSpace){\n//       if(item.status === 1){\n//         listFull.push(this.statusOne(item.id, itemUser))\n//       } else if (item.status === 0){\n//         listFull.push(this.statusZero(item.id))\n//       } else {console.log(\"Ошибка\")}\n//     }\n\n//   console.log(listFull);\n//   }\n\n//   statusOne = (id, users) => {\n//     for(let user of users) {\n//       if(id === Number(user.parkingLot)){\n//         return <li>`${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`</li>\n//       }\n//     }\n//   }\n//   statusZero = (id) => {\n//     return <li>`${id} - Свободно`</li>\n//   }\n\n//   async fetchUser() {\n//     const response = await fetch('/api/users');\n//     const {users} = await response.json();\n//     return users;\n//   }\n\n//   async fetchSpace() {\n//     const response = await fetch('/api/spaces');\n//     const {data} = await response.json();\n//     return data;\n//   }\n// }\n\n// export default List;\n\nimport React from 'react';\nimport { List } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst createLoad = () => {\n  const data = ['Racing car sprays burning fuel into crowd.', 'Japanese princess to wed commoner.', 'Australian walks 100km after outback crash.', 'Man charged over missing wedding girl.', 'Los Angeles battles huge wildfires.'];\n  return data;\n};\n\n// const data = [\n//   'Racing car sprays burning fuel into crowd.',\n//   'Japanese princess to wed commoner.',\n//   'Australian walks 100km after outback crash.',\n//   'Man charged over missing wedding girl.',\n//   'Los Angeles battles huge wildfires.',\n// ];\n\nconst ListUsers = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(List, {\n    dataSource: createLoad,\n    renderItem: item => /*#__PURE__*/_jsxDEV(List.Item, {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n_c = ListUsers;\nexport default ListUsers;\nvar _c;\n$RefreshReg$(_c, \"ListUsers\");","map":{"version":3,"names":["React","List","jsxDEV","_jsxDEV","Fragment","_Fragment","createLoad","data","ListUsers","children","dataSource","renderItem","item","Item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/TPU/Тинькофф/parking/src/modules/containers/ListUsers.jsx"],"sourcesContent":["// class List extends React.Component { \r\n\r\n//   async load() {\r\n//     const listFull = [];\r\n//     const itemSpace = await this.fetchSpace();\r\n//     const itemUser = await this.fetchUser();\r\n//     for(let item of itemSpace){\r\n//       if(item.status === 1){\r\n//         listFull.push(this.statusOne(item.id, itemUser))\r\n//       } else if (item.status === 0){\r\n//         listFull.push(this.statusZero(item.id))\r\n//       } else {console.log(\"Ошибка\")}\r\n//     }\r\n\r\n//   console.log(listFull);\r\n//   }\r\n\r\n//   statusOne = (id, users) => {\r\n//     for(let user of users) {\r\n//       if(id === Number(user.parkingLot)){\r\n//         return <li>`${id} - ${user.secondName} ${user.firstName} - ${user.carNumber}`</li>\r\n//       }\r\n//     }\r\n//   }\r\n//   statusZero = (id) => {\r\n//     return <li>`${id} - Свободно`</li>\r\n//   }\r\n\r\n//   async fetchUser() {\r\n//     const response = await fetch('/api/users');\r\n//     const {users} = await response.json();\r\n//     return users;\r\n//   }\r\n\r\n//   async fetchSpace() {\r\n//     const response = await fetch('/api/spaces');\r\n//     const {data} = await response.json();\r\n//     return data;\r\n//   }\r\n// }\r\n\r\n// export default List;\r\n\r\n\r\nimport React from 'react';\r\nimport { List } from 'antd';\r\n\r\nconst createLoad = () => {\r\n  const data = [\r\n    'Racing car sprays burning fuel into crowd.',\r\n    'Japanese princess to wed commoner.',\r\n    'Australian walks 100km after outback crash.',\r\n    'Man charged over missing wedding girl.',\r\n    'Los Angeles battles huge wildfires.',\r\n  ];\r\n\r\n  return data;\r\n}\r\n\r\n// const data = [\r\n//   'Racing car sprays burning fuel into crowd.',\r\n//   'Japanese princess to wed commoner.',\r\n//   'Australian walks 100km after outback crash.',\r\n//   'Man charged over missing wedding girl.',\r\n//   'Los Angeles battles huge wildfires.',\r\n// ];\r\n\r\nconst ListUsers = () => (\r\n  <>\r\n    <List\r\n      dataSource={createLoad}\r\n      renderItem={item => (\r\n        <List.Item>\r\n          <li>{item}</li>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  </>\r\n);\r\n\r\nexport default ListUsers;"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMC,IAAI,GAAG,CACX,4CAA4C,EAC5C,oCAAoC,EACpC,6CAA6C,EAC7C,wCAAwC,EACxC,qCAAqC,CACtC;EAED,OAAOA,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGA,CAAA,kBAChBL,OAAA,CAAAE,SAAA;EAAAI,QAAA,eACEN,OAAA,CAACF,IAAI;IACHS,UAAU,EAAEJ,UAAW;IACvBK,UAAU,EAAEC,IAAI,iBACdT,OAAA,CAACF,IAAI,CAACY,IAAI;MAAAJ,QAAA,eACRN,OAAA;QAAAM,QAAA,EAAKG;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH;AAAC,gBACF,CACH;AAACC,EAAA,GAXIV,SAAS;AAaf,eAAeA,SAAS;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}