---------------------------------fetchParkingList.js---------------------------

// await apiGet('/api/get_lots/')
  //   .then(res => {

  //     const greenLots = res.active_lots.map(item => { // список свободных мест
  //       return {
  //         'id': item.id,
  //         'title': `${item.id} - ${item.secondName} ${item.firstName} - ${item.carNumber} - ${item.startTime.split(' ')[1].substr(0, 5)}`,
  //         'color': 'red',
  //         'floor': item.floor
  //       }
  //     })
  //     const redLots = res.inactive_lots.map(item => { // список занятых мест
  //       return {
  //         'id': item.id,
  //         'title': `${item.id} - Cвободно`,
  //         'color': 'green',
  //         'floor': item.floor
  //       }
  //     })

  //     const listOfLots = [...new Set([...greenLots, ...redLots])].sort(function (a, b) { // сортировка
  //       return a.id - b.id;
  //     });
  //     setPlace(listOfLots);

  //     setFloors([...new Set(listOfLots.map(item => {
  //       return item.floor
  //     }))])

  //   })
  //   .catch(err => console.log('lots err', err));


---------------------------------auth.js---------------------------

// const entrance = (e) => { // api
//   e.preventDefault()

//   const authorization = async () => {
//     //   if (log === '' || pass === '') {
//     //     setErr('noData')
//     //   }
//     //   else {
//     //   await apiPost('/api/token/', {
//     //     "login": log,
//     //     "password": pass,
//     //     "first_name": "admin",
//     //     "second_name": "admin"
//     //   }
//     //   ).then(res => {
//     //     // if (res.auth === 1) {
//     //     //   setErr('no')
//     //     navigate('main', { replace: 'true' })
//     //     // }
//     //     // else if (res.auth === 0) {
//     //     //   setErr('errData')
//     //     // }
//     //   }
//     //   ).catch(res => setErr('errSys'));
//     // }

//     const res = await axios.get('https://65a8c529219bfa3718678849.mockapi.io/auth');

//     // if (res.data[0].auth === 1) {
//     //   setErr('no')
//     //   navigate('main/map', { replace: 'true' })
//     // }
//     // else if (res.data[0].auth === 0) {
//     //   setErr('errData')
//     // }

//     console.log(res.data[0]);
//     return res.data[0];

//   };

//   authorization()
// }






// if (res.data[0].auth === 1) {
  //   setErr('no')
  //   navigate('main/map', { replace: 'true' })
  // }
  // else if (res.data[0].auth === 0) {
  //   setErr('errData')
  // }



---------------------------------createAdmin.js---------------------------

  // if (login === '' || oldPassword === '' || newPassword === '' || doubleNewPassword === '') {
  //   setErr('noData')
  // }
  // else {
  // await apiPost('/api/token/', {
  //   "login": log,
  //   "password": pass,
  //   "first_name": "admin",
  //   "second_name": "admin"
  // }
  // ).then(res => {
  //   // if (res.auth === 1) {
  //   //   setErr('no')
  //   navigate('main', { replace: 'true' })
  //   // }
  //   // else if (res.auth === 0) {
  //   //   setErr('errData')
  //   // }
  // }
  // ).catch(res => setErr('errSys'));


  ---------------------------------createUser.js---------------------------

    // if (secondName === '' || firstName === '' || letter === '' || carNumbers.length === 1) {
  //   setErr('noData')
  // }
  // else {
  // await apiPost('/api/token/', {
  //   "login": log,
  //   "password": pass,
  //   "first_name": "admin",
  //   "second_name": "admin"
  // }
  // ).then(res => {
  //   // if (res.auth === 1) {
  //   //   setErr('no')
  //   navigate('main', { replace: 'true' })
  //   // }
  //   // else if (res.auth === 0) {
  //   //   setErr('errData')
  //   // }
  // }
  // ).catch(res => setErr('errSys'));



  ---------------------------------MapPage.jsx---------------------------

  // import FormBooking from '../Forms/FormBooking';
// import FormNoBooking from '../Forms/FormNoBooking';
// import { useSelector } from "react-redux";
// import { useEffect, useState } from 'react';




{/* <FormBooking />
      <FormNoBooking /> */}



---------------------------------Table.jsx---------------------------

// if (item.active === 'active')
                //   return <tr key={item.id}>
                //     <td >{item.id}</td>
                //     <td >{item.name}</td>
                //     <td >{item.carNumber}</td>
                //     <td >{item.time}</td>
                //     <td ><Tooltip data='Место 8 на парковке занято a123az, а в приложении свободно' /></td>
                //   </tr>
                // else {
                //   return <tr key={item.id} >
                //     <td >{item.id}</td>
                //     <td >{item.name}</td>
                //     <td ></td>
                //     <td ></td>
                //     <td ></td>
                //   </tr>
                // }

---------------------------------MapSection.jsx---------------------------

// if (restarting === true) { // перезагрузка страницы
  //   dispatch(setNeed(false))
  //   fetchData()
  // }




{/* {
        placesList.length === 0 ?
          <section className={styleMainSection.maps}>
            <p className={styleMainSection.pData}>Загрузка данных</p>
          </section>
          :
          <section className={styleMainSection.section}>
            {/* <Map floor={floorNumber} />
            <TablePlaces lots={placesList} /> 

          </section>
      } */}

---------------------------------Map1.js---------------------------

<g onClick={places.filter(item => item.id === 10)[0].active === 'inactive' ? () => booking(10) : () => noBooking(10)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 10)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M349.242 391.281H233.575v49.5h115.667z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="300"
        y="-410.721"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="300" y="-410.721" strokeWidth="0.75">
          10{places.filter(item => item.id === 10)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 10)[0].carNumber}`}
        </tspan>
      </text>
    </g>
    <g onClick={places.filter(item => item.id === 9)[0].active === 'inactive' ? () => booking(9) : () => noBooking(9)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 9)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M349.242 327.781H233.575v49.5h115.667z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="300"
        y="-347.94"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="300" y="-347.94" strokeWidth="0.75">
          9{places.filter(item => item.id === 9)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 9)[0].carNumber}`}
        </tspan>
      </text>
    </g>
    <g onClick={places.filter(item => item.id === 8)[0].active === 'inactive' ? () => booking(8) : () => noBooking(8)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 8)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M349.242 250.862H233.575v49.501h115.667z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="300"
        y="-270"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="300" y="-270" strokeWidth="0.75">
          8{places.filter(item => item.id === 8)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 8)[0].carNumber}`}
        </tspan>
      </text>
    </g>
    <g onClick={places.filter(item => item.id === 7)[0].active === 'inactive' ? () => booking(7) : () => noBooking(7)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 7)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M349.659 188.243h-116.5v49.5h116.5z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="300"
        y="-208.386"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="300" y="-208.386" strokeWidth="0.75">
          7{places.filter(item => item.id === 7)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 7)[0].carNumber}`}
        </tspan>
      </text>
    </g>
    <g onClick={places.filter(item => item.id === 6)[0].active === 'inactive' ? () => booking(6) : () => noBooking(6)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 6)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M349.659 112.863H233.158v49.5h116.501z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="300"
        y="-132.369"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="300" y="-132.369" strokeWidth="0.75">
          6{places.filter(item => item.id === 6)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 6)[0].carNumber}`}
        </tspan>
      </text>
    </g>
    <g onClick={places.filter(item => item.id === 5)[0].active === 'inactive' ? () => booking(5) : () => noBooking(5)} textAnchor="middle">
      <path
        fill="#fff"
        fillOpacity="1"
        fillRule="nonzero"
        stroke={places.filter(item => item.id === 5)[0].active === 'inactive' ? '#0AB331' : '#F05255'}
        strokeDasharray="none"
        strokeLinecap="butt"
        strokeLinejoin="miter"
        strokeMiterlimit="10"
        strokeOpacity="1"
        strokeWidth="4"
        d="M490.045 112.863H373.544v49.5h116.501z"
      ></path>
      <text
        xmlSpace="preserve"
        style={{
          lineHeight: "3",
          InkscapeFontSpecification: "'Tinkoff Sans'",
          WebkitTextAlign: "center",
          textAlign: "center",
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          MsUserSelect: "none",
          userSelect: "none",
        }}
        x="440"
        y="-131.99"
        fill="#000"
        strokeWidth="0.75"
        fontFamily="Tinkoff Sans"
        fontSize="18"
        fontStretch="normal"
        fontStyle="normal"
        fontVariant="normal"
        fontWeight="normal"
        textAnchor="middle"
        transform="scale(1 -1)"
      >
        <tspan x="440" y="-131.99" strokeWidth="0.75">
          5{places.filter(item => item.id === 5)[0].active === 'inactive' ? '' : ` - ${places.filter(item => item.id === 5)[0].carNumber}`}
        </tspan>
      </text>
    </g>
</svg >